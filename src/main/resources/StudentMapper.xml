<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace, 映射命名空间，作用就是对 sql 进行分类化管理，persistence-->
<mapper namespace="cn.rayest.mybatis02.persistence.StudentPersistence">

    <!-- 自定义查询结果集合
        <resultMap type="Address" id="AddressResult">
            <result property="id" column="id"/>
            <result property="province" column="province"/>
            <result property="city" column="city"/>
            <result property="district" column="district"/>
        </resultMap>

        <resultMap type="Student" id="StudentResult">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
            <result property="age" column="age"/>
            <association property="address" resultMap="AddressResult"/>
        </resultMap>
    -->

    <resultMap type="Student" id="StudentResult">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>

        <association property="address" column="addressId"
                     select="cn.rayest.mybatis02.persistence.AddressPersistence.findById"></association>

        <association property="grade" column="gradeId"
                     select="cn.rayest.mybatis02.persistence.GradePersistence.findById"></association>
    </resultMap>

    <select id="findStudentWithAddress" resultMap="StudentResult" parameterType="Integer">
		SELECT * from t_student t1, t_address t2 WHERE t1.addressId=t2.id and t1.id=#{id}
	</select>

    <select id="findByGradeId" resultMap="StudentResult" parameterType="Integer">
		SELECT * FROM t_student WHERE gradeId=#{gradeId}
	</select>

    <!--StudentMapper的insert方法（add），parameterType是参数类型-->

    <!--
        id：标识映射文件中的 sql
        将 sql 语句封装到 mappedStatement 对象中，id 称为 statement 的 id
    -->
    <!-- 添加学生
         parameterType: 指定输入参数的类型是 pojo(包括用户信息)
         #{} 中指定 pojo 属性名，接收到 pojo 对象的属性值，mybatis 通过 ognl 获取对象属性值
    -->
    <insert id="add" parameterType="Student">
        /* 1. 使用 uuid() 获取主键，将主键设置到 student 对象的 id 属性中
        2. 在执行 insert 时，从 user 对象中取出 id 属性值
        */
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        insert into t_student(id, name,age) values(#{id}, #{name}, #{age})
    </insert>

    <!-- 根据 id 更新学生信息
         1. 需要传入的 id属性值
         2. 需要传入的学生的更新信息
         3. parameterType 指定 user 对象，包括 id 和更新的信息
         4. #{id}: 从输入 user 对象中获取 id 属性值
    -->
    <update id="update" parameterType="Student">
		UPDATE t_student SET name=#{name}, age=#{age} WHERE id=#{id}
	</update>

    <!-- 删除学生 -->
    <delete id="delete" parameterType="Integer">
		DELETE FROM t_student WHERE id=#{id}
    </delete>

    <!-- 通过 id 查找学生 -->
    <select id="findById" parameterType="Integer" resultType="Student">
		SELECT * from t_student WHERE id=#{id}
	</select>

    <select id="find" resultMap="StudentResult">
		SELECT * FROM t_student
	</select>


</mapper>